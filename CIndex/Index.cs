// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace CIndex
{

    public static partial class libclang
    {
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_createIndex(
            int excludeDeclarationsFromPCH,
            int displayDiagnostics
        );
        [DllImport("libclang.dll")]
        public static extern void clang_disposeIndex(
            IntPtr index
        );
        [DllImport("libclang.dll")]
        public static extern void clang_CXIndex_setGlobalOptions(
            IntPtr __param__1,
            uint options
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_CXIndex_getGlobalOptions(
            IntPtr __param__1
        );
        [DllImport("libclang.dll")]
        public static extern void clang_CXIndex_setInvocationEmissionPathOption(
            IntPtr __param__1,
            ref byte Path
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_getFileName(
            IntPtr SFile
        );
        [DllImport("libclang.dll")]
        public static extern long clang_getFileTime(
            IntPtr SFile
        );
        [DllImport("libclang.dll")]
        public static extern int clang_getFileUniqueID(
            IntPtr file,
            IntPtr outID
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_isFileMultipleIncludeGuarded(
            IntPtr tu,
            IntPtr file
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_getFile(
            IntPtr tu,
            ref byte file_name
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_getFileContents(
            IntPtr tu,
            IntPtr file,
            IntPtr size
        );
        [DllImport("libclang.dll")]
        public static extern int clang_File_isEqual(
            IntPtr file1,
            IntPtr file2
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_File_tryGetRealPathName(
            IntPtr file
        );
        [DllImport("libclang.dll")]
        public static extern CXSourceLocation clang_getNullLocation(
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_equalLocations(
            CXSourceLocation loc1,
            CXSourceLocation loc2
        );
        [DllImport("libclang.dll")]
        public static extern CXSourceLocation clang_getLocation(
            IntPtr tu,
            IntPtr file,
            uint line,
            uint column
        );
        [DllImport("libclang.dll")]
        public static extern CXSourceLocation clang_getLocationForOffset(
            IntPtr tu,
            IntPtr file,
            uint offset
        );
        [DllImport("libclang.dll")]
        public static extern int clang_Location_isInSystemHeader(
            CXSourceLocation location
        );
        [DllImport("libclang.dll")]
        public static extern int clang_Location_isFromMainFile(
            CXSourceLocation location
        );
        [DllImport("libclang.dll")]
        public static extern CXSourceRange clang_getNullRange(
        );
        [DllImport("libclang.dll")]
        public static extern CXSourceRange clang_getRange(
            CXSourceLocation begin,
            CXSourceLocation end
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_equalRanges(
            CXSourceRange range1,
            CXSourceRange range2
        );
        [DllImport("libclang.dll")]
        public static extern int clang_Range_isNull(
            CXSourceRange range
        );
        [DllImport("libclang.dll")]
        public static extern void clang_getExpansionLocation(
            CXSourceLocation location,
            ref IntPtr file,
            ref uint line,
            ref uint column,
            ref uint offset
        );
        [DllImport("libclang.dll")]
        public static extern void clang_getPresumedLocation(
            CXSourceLocation location,
            IntPtr filename,
            ref uint line,
            ref uint column
        );
        [DllImport("libclang.dll")]
        public static extern void clang_getInstantiationLocation(
            CXSourceLocation location,
            ref IntPtr file,
            ref uint line,
            ref uint column,
            ref uint offset
        );
        [DllImport("libclang.dll")]
        public static extern void clang_getSpellingLocation(
            CXSourceLocation location,
            ref IntPtr file,
            ref uint line,
            ref uint column,
            ref uint offset
        );
        [DllImport("libclang.dll")]
        public static extern void clang_getFileLocation(
            CXSourceLocation location,
            ref IntPtr file,
            ref uint line,
            ref uint column,
            ref uint offset
        );
        [DllImport("libclang.dll")]
        public static extern CXSourceLocation clang_getRangeStart(
            CXSourceRange range
        );
        [DllImport("libclang.dll")]
        public static extern CXSourceLocation clang_getRangeEnd(
            CXSourceRange range
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_getSkippedRanges(
            IntPtr tu,
            IntPtr file
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_getAllSkippedRanges(
            IntPtr tu
        );
        [DllImport("libclang.dll")]
        public static extern void clang_disposeSourceRangeList(
            IntPtr ranges
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_getNumDiagnosticsInSet(
            IntPtr Diags
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_getDiagnosticInSet(
            IntPtr Diags,
            uint Index
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_loadDiagnostics(
            ref byte file,
            IntPtr error,
            IntPtr errorString
        );
        [DllImport("libclang.dll")]
        public static extern void clang_disposeDiagnosticSet(
            IntPtr Diags
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_getChildDiagnostics(
            IntPtr D
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_getNumDiagnostics(
            IntPtr Unit
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_getDiagnostic(
            IntPtr Unit,
            uint Index
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_getDiagnosticSetFromTU(
            IntPtr Unit
        );
        [DllImport("libclang.dll")]
        public static extern void clang_disposeDiagnostic(
            IntPtr Diagnostic
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_formatDiagnostic(
            IntPtr Diagnostic,
            uint Options
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_defaultDiagnosticDisplayOptions(
        );
        [DllImport("libclang.dll")]
        public static extern CXDiagnosticSeverity clang_getDiagnosticSeverity(
            IntPtr __param__1
        );
        [DllImport("libclang.dll")]
        public static extern CXSourceLocation clang_getDiagnosticLocation(
            IntPtr __param__1
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_getDiagnosticSpelling(
            IntPtr __param__1
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_getDiagnosticOption(
            IntPtr Diag,
            IntPtr Disable
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_getDiagnosticCategory(
            IntPtr __param__1
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_getDiagnosticCategoryName(
            uint Category
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_getDiagnosticCategoryText(
            IntPtr __param__1
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_getDiagnosticNumRanges(
            IntPtr __param__1
        );
        [DllImport("libclang.dll")]
        public static extern CXSourceRange clang_getDiagnosticRange(
            IntPtr Diagnostic,
            uint Range
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_getDiagnosticNumFixIts(
            IntPtr Diagnostic
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_getDiagnosticFixIt(
            IntPtr Diagnostic,
            uint FixIt,
            IntPtr ReplacementRange
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_getTranslationUnitSpelling(
            IntPtr CTUnit
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_createTranslationUnitFromSourceFile(
            IntPtr CIdx,
            ref byte source_filename,
            int num_clang_command_line_args,
            ref IntPtr clang_command_line_args,
            uint num_unsaved_files,
            ref CXUnsavedFile unsaved_files
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_createTranslationUnit(
            IntPtr CIdx,
            ref byte ast_filename
        );
        [DllImport("libclang.dll")]
        public static extern CXErrorCode clang_createTranslationUnit2(
            IntPtr CIdx,
            ref byte ast_filename,
            ref IntPtr out_TU
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_defaultEditingTranslationUnitOptions(
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_parseTranslationUnit(
            IntPtr CIdx,
            ref byte source_filename,
            ref IntPtr command_line_args,
            int num_command_line_args,
            ref CXUnsavedFile unsaved_files,
            uint num_unsaved_files,
            uint options
        );
        [DllImport("libclang.dll")]
        public static extern CXErrorCode clang_parseTranslationUnit2(
            IntPtr CIdx,
            ref byte source_filename,
            ref IntPtr command_line_args,
            int num_command_line_args,
            ref CXUnsavedFile unsaved_files,
            uint num_unsaved_files,
            uint options,
            ref IntPtr out_TU
        );
        [DllImport("libclang.dll")]
        public static extern CXErrorCode clang_parseTranslationUnit2FullArgv(
            IntPtr CIdx,
            ref byte source_filename,
            ref IntPtr command_line_args,
            int num_command_line_args,
            ref CXUnsavedFile unsaved_files,
            uint num_unsaved_files,
            uint options,
            ref IntPtr out_TU
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_defaultSaveOptions(
            IntPtr TU
        );
        [DllImport("libclang.dll")]
        public static extern int clang_saveTranslationUnit(
            IntPtr TU,
            ref byte FileName,
            uint options
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_suspendTranslationUnit(
            IntPtr __param__1
        );
        [DllImport("libclang.dll")]
        public static extern void clang_disposeTranslationUnit(
            IntPtr __param__1
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_defaultReparseOptions(
            IntPtr TU
        );
        [DllImport("libclang.dll")]
        public static extern int clang_reparseTranslationUnit(
            IntPtr TU,
            uint num_unsaved_files,
            ref CXUnsavedFile unsaved_files,
            uint options
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_getTUResourceUsageName(
            CXTUResourceUsageKind kind
        );
        [DllImport("libclang.dll")]
        public static extern CXTUResourceUsage clang_getCXTUResourceUsage(
            IntPtr TU
        );
        [DllImport("libclang.dll")]
        public static extern void clang_disposeCXTUResourceUsage(
            CXTUResourceUsage usage
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_getTranslationUnitTargetInfo(
            IntPtr CTUnit
        );
        [DllImport("libclang.dll")]
        public static extern void clang_TargetInfo_dispose(
            IntPtr Info
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_TargetInfo_getTriple(
            IntPtr Info
        );
        [DllImport("libclang.dll")]
        public static extern int clang_TargetInfo_getPointerWidth(
            IntPtr Info
        );
        [DllImport("libclang.dll")]
        public static extern CXCursor clang_getNullCursor(
        );
        [DllImport("libclang.dll")]
        public static extern CXCursor clang_getTranslationUnitCursor(
            IntPtr __param__1
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_equalCursors(
            CXCursor __param__1,
            CXCursor __param__2
        );
        [DllImport("libclang.dll")]
        public static extern int clang_Cursor_isNull(
            CXCursor cursor
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_hashCursor(
            CXCursor __param__1
        );
        [DllImport("libclang.dll")]
        public static extern CXCursorKind clang_getCursorKind(
            CXCursor __param__1
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_isDeclaration(
            CXCursorKind __param__1
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_isInvalidDeclaration(
            CXCursor __param__1
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_isReference(
            CXCursorKind __param__1
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_isExpression(
            CXCursorKind __param__1
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_isStatement(
            CXCursorKind __param__1
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_isAttribute(
            CXCursorKind __param__1
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_Cursor_hasAttrs(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_isInvalid(
            CXCursorKind __param__1
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_isTranslationUnit(
            CXCursorKind __param__1
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_isPreprocessing(
            CXCursorKind __param__1
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_isUnexposed(
            CXCursorKind __param__1
        );
        [DllImport("libclang.dll")]
        public static extern CXLinkageKind clang_getCursorLinkage(
            CXCursor cursor
        );
        [DllImport("libclang.dll")]
        public static extern CXVisibilityKind clang_getCursorVisibility(
            CXCursor cursor
        );
        [DllImport("libclang.dll")]
        public static extern CXAvailabilityKind clang_getCursorAvailability(
            CXCursor cursor
        );
        [DllImport("libclang.dll")]
        public static extern int clang_getCursorPlatformAvailability(
            CXCursor cursor,
            ref int always_deprecated,
            IntPtr deprecated_message,
            ref int always_unavailable,
            IntPtr unavailable_message,
            IntPtr availability,
            int availability_size
        );
        [DllImport("libclang.dll")]
        public static extern void clang_disposeCXPlatformAvailability(
            IntPtr availability
        );
        [DllImport("libclang.dll")]
        public static extern CXLanguageKind clang_getCursorLanguage(
            CXCursor cursor
        );
        [DllImport("libclang.dll")]
        public static extern CXTLSKind clang_getCursorTLSKind(
            CXCursor cursor
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_Cursor_getTranslationUnit(
            CXCursor __param__1
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_createCXCursorSet(
        );
        [DllImport("libclang.dll")]
        public static extern void clang_disposeCXCursorSet(
            IntPtr cset
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_CXCursorSet_contains(
            IntPtr cset,
            CXCursor cursor
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_CXCursorSet_insert(
            IntPtr cset,
            CXCursor cursor
        );
        [DllImport("libclang.dll")]
        public static extern CXCursor clang_getCursorSemanticParent(
            CXCursor cursor
        );
        [DllImport("libclang.dll")]
        public static extern CXCursor clang_getCursorLexicalParent(
            CXCursor cursor
        );
        [DllImport("libclang.dll")]
        public static extern void clang_getOverriddenCursors(
            CXCursor cursor,
            ref IntPtr overridden,
            ref uint num_overridden
        );
        [DllImport("libclang.dll")]
        public static extern void clang_disposeOverriddenCursors(
            IntPtr overridden
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_getIncludedFile(
            CXCursor cursor
        );
        [DllImport("libclang.dll")]
        public static extern CXCursor clang_getCursor(
            IntPtr __param__1,
            CXSourceLocation __param__2
        );
        [DllImport("libclang.dll")]
        public static extern CXSourceLocation clang_getCursorLocation(
            CXCursor __param__1
        );
        [DllImport("libclang.dll")]
        public static extern CXSourceRange clang_getCursorExtent(
            CXCursor __param__1
        );
        [DllImport("libclang.dll")]
        public static extern CXType clang_getCursorType(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_getTypeSpelling(
            CXType CT
        );
        [DllImport("libclang.dll")]
        public static extern CXType clang_getTypedefDeclUnderlyingType(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern CXType clang_getEnumDeclIntegerType(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern long clang_getEnumConstantDeclValue(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern ulong clang_getEnumConstantDeclUnsignedValue(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern int clang_getFieldDeclBitWidth(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern int clang_Cursor_getNumArguments(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern CXCursor clang_Cursor_getArgument(
            CXCursor C,
            uint i
        );
        [DllImport("libclang.dll")]
        public static extern int clang_Cursor_getNumTemplateArguments(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern CXTemplateArgumentKind clang_Cursor_getTemplateArgumentKind(
            CXCursor C,
            uint I
        );
        [DllImport("libclang.dll")]
        public static extern CXType clang_Cursor_getTemplateArgumentType(
            CXCursor C,
            uint I
        );
        [DllImport("libclang.dll")]
        public static extern long clang_Cursor_getTemplateArgumentValue(
            CXCursor C,
            uint I
        );
        [DllImport("libclang.dll")]
        public static extern ulong clang_Cursor_getTemplateArgumentUnsignedValue(
            CXCursor C,
            uint I
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_equalTypes(
            CXType A,
            CXType B
        );
        [DllImport("libclang.dll")]
        public static extern CXType clang_getCanonicalType(
            CXType T
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_isConstQualifiedType(
            CXType T
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_Cursor_isMacroFunctionLike(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_Cursor_isMacroBuiltin(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_Cursor_isFunctionInlined(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_isVolatileQualifiedType(
            CXType T
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_isRestrictQualifiedType(
            CXType T
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_getAddressSpace(
            CXType T
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_getTypedefName(
            CXType CT
        );
        [DllImport("libclang.dll")]
        public static extern CXType clang_getPointeeType(
            CXType T
        );
        [DllImport("libclang.dll")]
        public static extern CXCursor clang_getTypeDeclaration(
            CXType T
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_getDeclObjCTypeEncoding(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_Type_getObjCEncoding(
            CXType type
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_getTypeKindSpelling(
            CXTypeKind K
        );
        [DllImport("libclang.dll")]
        public static extern CXCallingConv clang_getFunctionTypeCallingConv(
            CXType T
        );
        [DllImport("libclang.dll")]
        public static extern CXType clang_getResultType(
            CXType T
        );
        [DllImport("libclang.dll")]
        public static extern int clang_getExceptionSpecificationType(
            CXType T
        );
        [DllImport("libclang.dll")]
        public static extern int clang_getNumArgTypes(
            CXType T
        );
        [DllImport("libclang.dll")]
        public static extern CXType clang_getArgType(
            CXType T,
            uint i
        );
        [DllImport("libclang.dll")]
        public static extern CXType clang_Type_getObjCObjectBaseType(
            CXType T
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_Type_getNumObjCProtocolRefs(
            CXType T
        );
        [DllImport("libclang.dll")]
        public static extern CXCursor clang_Type_getObjCProtocolDecl(
            CXType T,
            uint i
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_Type_getNumObjCTypeArgs(
            CXType T
        );
        [DllImport("libclang.dll")]
        public static extern CXType clang_Type_getObjCTypeArg(
            CXType T,
            uint i
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_isFunctionTypeVariadic(
            CXType T
        );
        [DllImport("libclang.dll")]
        public static extern CXType clang_getCursorResultType(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern int clang_getCursorExceptionSpecificationType(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_isPODType(
            CXType T
        );
        [DllImport("libclang.dll")]
        public static extern CXType clang_getElementType(
            CXType T
        );
        [DllImport("libclang.dll")]
        public static extern long clang_getNumElements(
            CXType T
        );
        [DllImport("libclang.dll")]
        public static extern CXType clang_getArrayElementType(
            CXType T
        );
        [DllImport("libclang.dll")]
        public static extern long clang_getArraySize(
            CXType T
        );
        [DllImport("libclang.dll")]
        public static extern CXType clang_Type_getNamedType(
            CXType T
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_Type_isTransparentTagTypedef(
            CXType T
        );
        [DllImport("libclang.dll")]
        public static extern CXTypeNullabilityKind clang_Type_getNullability(
            CXType T
        );
        [DllImport("libclang.dll")]
        public static extern long clang_Type_getAlignOf(
            CXType T
        );
        [DllImport("libclang.dll")]
        public static extern CXType clang_Type_getClassType(
            CXType T
        );
        [DllImport("libclang.dll")]
        public static extern long clang_Type_getSizeOf(
            CXType T
        );
        [DllImport("libclang.dll")]
        public static extern long clang_Type_getOffsetOf(
            CXType T,
            ref byte S
        );
        [DllImport("libclang.dll")]
        public static extern CXType clang_Type_getModifiedType(
            CXType T
        );
        [DllImport("libclang.dll")]
        public static extern long clang_Cursor_getOffsetOfField(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_Cursor_isAnonymous(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_Cursor_isAnonymousRecordDecl(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_Cursor_isInlineNamespace(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern int clang_Type_getNumTemplateArguments(
            CXType T
        );
        [DllImport("libclang.dll")]
        public static extern CXType clang_Type_getTemplateArgumentAsType(
            CXType T,
            uint i
        );
        [DllImport("libclang.dll")]
        public static extern CXRefQualifierKind clang_Type_getCXXRefQualifier(
            CXType T
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_Cursor_isBitField(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_isVirtualBase(
            CXCursor __param__1
        );
        [DllImport("libclang.dll")]
        public static extern CX_CXXAccessSpecifier clang_getCXXAccessSpecifier(
            CXCursor __param__1
        );
        [DllImport("libclang.dll")]
        public static extern CX_StorageClass clang_Cursor_getStorageClass(
            CXCursor __param__1
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_getNumOverloadedDecls(
            CXCursor cursor
        );
        [DllImport("libclang.dll")]
        public static extern CXCursor clang_getOverloadedDecl(
            CXCursor cursor,
            uint index
        );
        [DllImport("libclang.dll")]
        public static extern CXType clang_getIBOutletCollectionType(
            CXCursor __param__1
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_visitChildren(
            CXCursor parent,
            IntPtr visitor,
            IntPtr client_data
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_getCursorUSR(
            CXCursor __param__1
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_constructUSR_ObjCClass(
            ref byte class_name
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_constructUSR_ObjCCategory(
            ref byte class_name,
            ref byte category_name
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_constructUSR_ObjCProtocol(
            ref byte protocol_name
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_constructUSR_ObjCIvar(
            ref byte name,
            CXString classUSR
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_constructUSR_ObjCMethod(
            ref byte name,
            uint isInstanceMethod,
            CXString classUSR
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_constructUSR_ObjCProperty(
            ref byte property,
            CXString classUSR
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_getCursorSpelling(
            CXCursor __param__1
        );
        [DllImport("libclang.dll")]
        public static extern CXSourceRange clang_Cursor_getSpellingNameRange(
            CXCursor __param__1,
            uint pieceIndex,
            uint options
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_PrintingPolicy_getProperty(
            IntPtr Policy,
            CXPrintingPolicyProperty Property
        );
        [DllImport("libclang.dll")]
        public static extern void clang_PrintingPolicy_setProperty(
            IntPtr Policy,
            CXPrintingPolicyProperty Property,
            uint Value
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_getCursorPrintingPolicy(
            CXCursor __param__1
        );
        [DllImport("libclang.dll")]
        public static extern void clang_PrintingPolicy_dispose(
            IntPtr Policy
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_getCursorPrettyPrinted(
            CXCursor Cursor,
            IntPtr Policy
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_getCursorDisplayName(
            CXCursor __param__1
        );
        [DllImport("libclang.dll")]
        public static extern CXCursor clang_getCursorReferenced(
            CXCursor __param__1
        );
        [DllImport("libclang.dll")]
        public static extern CXCursor clang_getCursorDefinition(
            CXCursor __param__1
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_isCursorDefinition(
            CXCursor __param__1
        );
        [DllImport("libclang.dll")]
        public static extern CXCursor clang_getCanonicalCursor(
            CXCursor __param__1
        );
        [DllImport("libclang.dll")]
        public static extern int clang_Cursor_getObjCSelectorIndex(
            CXCursor __param__1
        );
        [DllImport("libclang.dll")]
        public static extern int clang_Cursor_isDynamicCall(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern CXType clang_Cursor_getReceiverType(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_Cursor_getObjCPropertyAttributes(
            CXCursor C,
            uint reserved
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_Cursor_getObjCPropertyGetterName(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_Cursor_getObjCPropertySetterName(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_Cursor_getObjCDeclQualifiers(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_Cursor_isObjCOptional(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_Cursor_isVariadic(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_Cursor_isExternalSymbol(
            CXCursor C,
            IntPtr language,
            IntPtr definedIn,
            ref uint isGenerated
        );
        [DllImport("libclang.dll")]
        public static extern CXSourceRange clang_Cursor_getCommentRange(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_Cursor_getRawCommentText(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_Cursor_getBriefCommentText(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_Cursor_getMangling(
            CXCursor __param__1
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_Cursor_getCXXManglings(
            CXCursor __param__1
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_Cursor_getObjCManglings(
            CXCursor __param__1
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_Cursor_getModule(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_getModuleForFile(
            IntPtr __param__1,
            IntPtr __param__2
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_Module_getASTFile(
            IntPtr Module
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_Module_getParent(
            IntPtr Module
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_Module_getName(
            IntPtr Module
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_Module_getFullName(
            IntPtr Module
        );
        [DllImport("libclang.dll")]
        public static extern int clang_Module_isSystem(
            IntPtr Module
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_Module_getNumTopLevelHeaders(
            IntPtr __param__1,
            IntPtr Module
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_Module_getTopLevelHeader(
            IntPtr __param__1,
            IntPtr Module,
            uint Index
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_CXXConstructor_isConvertingConstructor(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_CXXConstructor_isCopyConstructor(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_CXXConstructor_isDefaultConstructor(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_CXXConstructor_isMoveConstructor(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_CXXField_isMutable(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_CXXMethod_isDefaulted(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_CXXMethod_isPureVirtual(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_CXXMethod_isStatic(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_CXXMethod_isVirtual(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_CXXRecord_isAbstract(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_EnumDecl_isScoped(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_CXXMethod_isConst(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern CXCursorKind clang_getTemplateCursorKind(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern CXCursor clang_getSpecializedCursorTemplate(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern CXSourceRange clang_getCursorReferenceNameRange(
            CXCursor C,
            uint NameFlags,
            uint PieceIndex
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_getToken(
            IntPtr TU,
            CXSourceLocation Location
        );
        [DllImport("libclang.dll")]
        public static extern CXTokenKind clang_getTokenKind(
            CXToken __param__1
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_getTokenSpelling(
            IntPtr __param__1,
            CXToken __param__2
        );
        [DllImport("libclang.dll")]
        public static extern CXSourceLocation clang_getTokenLocation(
            IntPtr __param__1,
            CXToken __param__2
        );
        [DllImport("libclang.dll")]
        public static extern CXSourceRange clang_getTokenExtent(
            IntPtr __param__1,
            CXToken __param__2
        );
        [DllImport("libclang.dll")]
        public static extern void clang_tokenize(
            IntPtr TU,
            CXSourceRange Range,
            ref IntPtr Tokens,
            ref uint NumTokens
        );
        [DllImport("libclang.dll")]
        public static extern void clang_annotateTokens(
            IntPtr TU,
            IntPtr Tokens,
            uint NumTokens,
            IntPtr Cursors
        );
        [DllImport("libclang.dll")]
        public static extern void clang_disposeTokens(
            IntPtr TU,
            IntPtr Tokens,
            uint NumTokens
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_getCursorKindSpelling(
            CXCursorKind Kind
        );
        [DllImport("libclang.dll")]
        public static extern void clang_getDefinitionSpellingAndExtent(
            CXCursor __param__1,
            ref IntPtr startBuf,
            ref IntPtr endBuf,
            ref uint startLine,
            ref uint startColumn,
            ref uint endLine,
            ref uint endColumn
        );
        [DllImport("libclang.dll")]
        public static extern void clang_enableStackTraces(
        );
        [DllImport("libclang.dll")]
        public static extern void clang_executeOnThread(
            IntPtr fn,
            IntPtr user_data,
            uint stack_size
        );
        [DllImport("libclang.dll")]
        public static extern CXCompletionChunkKind clang_getCompletionChunkKind(
            IntPtr completion_string,
            uint chunk_number
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_getCompletionChunkText(
            IntPtr completion_string,
            uint chunk_number
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_getCompletionChunkCompletionString(
            IntPtr completion_string,
            uint chunk_number
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_getNumCompletionChunks(
            IntPtr completion_string
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_getCompletionPriority(
            IntPtr completion_string
        );
        [DllImport("libclang.dll")]
        public static extern CXAvailabilityKind clang_getCompletionAvailability(
            IntPtr completion_string
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_getCompletionNumAnnotations(
            IntPtr completion_string
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_getCompletionAnnotation(
            IntPtr completion_string,
            uint annotation_number
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_getCompletionParent(
            IntPtr completion_string,
            IntPtr kind
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_getCompletionBriefComment(
            IntPtr completion_string
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_getCursorCompletionString(
            CXCursor cursor
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_getCompletionNumFixIts(
            IntPtr results,
            uint completion_index
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_getCompletionFixIt(
            IntPtr results,
            uint completion_index,
            uint fixit_index,
            IntPtr replacement_range
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_defaultCodeCompleteOptions(
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_codeCompleteAt(
            IntPtr TU,
            ref byte complete_filename,
            uint complete_line,
            uint complete_column,
            ref CXUnsavedFile unsaved_files,
            uint num_unsaved_files,
            uint options
        );
        [DllImport("libclang.dll")]
        public static extern void clang_sortCodeCompletionResults(
            IntPtr Results,
            uint NumResults
        );
        [DllImport("libclang.dll")]
        public static extern void clang_disposeCodeCompleteResults(
            IntPtr Results
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_codeCompleteGetNumDiagnostics(
            IntPtr Results
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_codeCompleteGetDiagnostic(
            IntPtr Results,
            uint Index
        );
        [DllImport("libclang.dll")]
        public static extern ulong clang_codeCompleteGetContexts(
            IntPtr Results
        );
        [DllImport("libclang.dll")]
        public static extern CXCursorKind clang_codeCompleteGetContainerKind(
            IntPtr Results,
            ref uint IsIncomplete
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_codeCompleteGetContainerUSR(
            IntPtr Results
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_codeCompleteGetObjCSelector(
            IntPtr Results
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_getClangVersion(
        );
        [DllImport("libclang.dll")]
        public static extern void clang_toggleCrashRecovery(
            uint isEnabled
        );
        [DllImport("libclang.dll")]
        public static extern void clang_getInclusions(
            IntPtr tu,
            IntPtr visitor,
            IntPtr client_data
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_Cursor_Evaluate(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern CXEvalResultKind clang_EvalResult_getKind(
            IntPtr E
        );
        [DllImport("libclang.dll")]
        public static extern int clang_EvalResult_getAsInt(
            IntPtr E
        );
        [DllImport("libclang.dll")]
        public static extern long clang_EvalResult_getAsLongLong(
            IntPtr E
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_EvalResult_isUnsignedInt(
            IntPtr E
        );
        [DllImport("libclang.dll")]
        public static extern ulong clang_EvalResult_getAsUnsigned(
            IntPtr E
        );
        [DllImport("libclang.dll")]
        public static extern double clang_EvalResult_getAsDouble(
            IntPtr E
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_EvalResult_getAsStr(
            IntPtr E
        );
        [DllImport("libclang.dll")]
        public static extern void clang_EvalResult_dispose(
            IntPtr E
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_getRemappings(
            ref byte path
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_getRemappingsFromFileList(
            ref IntPtr filePaths,
            uint numFiles
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_remap_getNumFiles(
            IntPtr __param__1
        );
        [DllImport("libclang.dll")]
        public static extern void clang_remap_getFilenames(
            IntPtr __param__1,
            uint index,
            IntPtr original,
            IntPtr transformed
        );
        [DllImport("libclang.dll")]
        public static extern void clang_remap_dispose(
            IntPtr __param__1
        );
        [DllImport("libclang.dll")]
        public static extern CXResult clang_findReferencesInFile(
            CXCursor cursor,
            IntPtr file,
            CXCursorAndRangeVisitor visitor
        );
        [DllImport("libclang.dll")]
        public static extern CXResult clang_findIncludesInFile(
            IntPtr TU,
            IntPtr file,
            CXCursorAndRangeVisitor visitor
        );
        [DllImport("libclang.dll")]
        public static extern int clang_index_isEntityObjCContainerKind(
            CXIdxEntityKind __param__1
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_index_getObjCContainerDeclInfo(
            IntPtr __param__1
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_index_getObjCInterfaceDeclInfo(
            IntPtr __param__1
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_index_getObjCCategoryDeclInfo(
            IntPtr __param__1
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_index_getObjCProtocolRefListInfo(
            IntPtr __param__1
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_index_getObjCPropertyDeclInfo(
            IntPtr __param__1
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_index_getIBOutletCollectionAttrInfo(
            IntPtr __param__1
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_index_getCXXClassDeclInfo(
            IntPtr __param__1
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_index_getClientContainer(
            IntPtr __param__1
        );
        [DllImport("libclang.dll")]
        public static extern void clang_index_setClientContainer(
            IntPtr __param__1,
            IntPtr __param__2
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_index_getClientEntity(
            IntPtr __param__1
        );
        [DllImport("libclang.dll")]
        public static extern void clang_index_setClientEntity(
            IntPtr __param__1,
            IntPtr __param__2
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_IndexAction_create(
            IntPtr CIdx
        );
        [DllImport("libclang.dll")]
        public static extern void clang_IndexAction_dispose(
            IntPtr __param__1
        );
        [DllImport("libclang.dll")]
        public static extern int clang_indexSourceFile(
            IntPtr __param__1,
            IntPtr client_data,
            IntPtr index_callbacks,
            uint index_callbacks_size,
            uint index_options,
            ref byte source_filename,
            ref IntPtr command_line_args,
            int num_command_line_args,
            ref CXUnsavedFile unsaved_files,
            uint num_unsaved_files,
            ref IntPtr out_TU,
            uint TU_options
        );
        [DllImport("libclang.dll")]
        public static extern int clang_indexSourceFileFullArgv(
            IntPtr __param__1,
            IntPtr client_data,
            IntPtr index_callbacks,
            uint index_callbacks_size,
            uint index_options,
            ref byte source_filename,
            ref IntPtr command_line_args,
            int num_command_line_args,
            ref CXUnsavedFile unsaved_files,
            uint num_unsaved_files,
            ref IntPtr out_TU,
            uint TU_options
        );
        [DllImport("libclang.dll")]
        public static extern int clang_indexTranslationUnit(
            IntPtr __param__1,
            IntPtr client_data,
            IntPtr index_callbacks,
            uint index_callbacks_size,
            uint index_options,
            IntPtr __param__6
        );
        [DllImport("libclang.dll")]
        public static extern void clang_indexLoc_getFileLocation(
            CXIdxLoc loc,
            ref IntPtr indexFile,
            ref IntPtr file,
            ref uint line,
            ref uint column,
            ref uint offset
        );
        [DllImport("libclang.dll")]
        public static extern CXSourceLocation clang_indexLoc_getCXSourceLocation(
            CXIdxLoc loc
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_Type_visitFields(
            CXType T,
            IntPtr visitor,
            IntPtr client_data
        );
    }
}
