// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace libclang
{
    public static partial class Constants
    {
        public const int CINDEX_VERSION_MAJOR = 0;
        public const int CINDEX_VERSION_MINOR = 59;
        // macro function: CINDEX_VERSION_ENCODE ( major , minor ) ( ( ( major ) * 10000 ) + ( ( minor ) * 1 ) )
        // unknown type: CINDEX_VERSION CINDEX_VERSION_ENCODE ( CINDEX_VERSION_MAJOR , CINDEX_VERSION_MINOR )
        // macro function: CINDEX_VERSION_STRINGIZE_ ( major , minor ) # major "." # minor
        // macro function: CINDEX_VERSION_STRINGIZE ( major , minor ) CINDEX_VERSION_STRINGIZE_ ( major , minor )
        // unknown type: CINDEX_VERSION_STRING CINDEX_VERSION_STRINGIZE ( CINDEX_VERSION_MAJOR , CINDEX_VERSION_MINOR )
    }
    // forward declaration CXTargetInfoImpl;
    // typedef struct CXTargetInfoImpl *CXTargetInfo;
    public struct CXTargetInfoImpl
    {
        public IntPtr p;
    }

    // forward declaration CXTranslationUnitImpl;
    // typedef struct CXTranslationUnitImpl *CXTranslationUnit;
    public struct CXTranslationUnitImpl
    {
        public IntPtr p;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct CXUnsavedFile // 8
    {
        public IntPtr Filename;
        public IntPtr Contents;
        public uint Length;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct CXVersion // 1
    {
        public int Major;
        public int Minor;
        public int Subminor;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct CXFileUniqueID // 1
    {
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 3)] public ulong[] data;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct CXSourceLocation // 1
    {
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 2)] public IntPtr[] ptr_data;
        public uint int_data;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct CXSourceRange // 1
    {
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 2)] public IntPtr[] ptr_data;
        public uint begin_int_data;
        public uint end_int_data;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct CXSourceRangeList // 1
    {
        public uint count;
        public IntPtr ranges;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct CXTUResourceUsageEntry // 1
    {
        public CXTUResourceUsageKind kind;
        public uint amount;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct CXTUResourceUsage // 1
    {
        public IntPtr data;
        public uint numEntries;
        public IntPtr entries;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct CXCursor // 1
    {
        public CXCursorKind kind;
        public int xdata;
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 3)] public IntPtr[] data;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct CXPlatformAvailability // 1
    {
        public CXString Platform;
        public CXVersion Introduced;
        public CXVersion Deprecated;
        public CXVersion Obsoleted;
        public int Unavailable;
        public CXString Message;
    }
    // forward declaration CXCursorSetImpl;
    // typedef struct CXCursorSetImpl *CXCursorSet;
    public struct CXCursorSetImpl
    {
        public IntPtr p;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct CXType // 1
    {
        public CXTypeKind kind;
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 2)] public IntPtr[] data;
    }
    public delegate CXChildVisitResult CXCursorVisitor(CXCursor cursor, CXCursor parent, IntPtr client_data);
    [StructLayout(LayoutKind.Sequential)]
    public struct CXToken // 1
    {
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 4)] public uint[] int_data;
        public IntPtr ptr_data;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct CXCompletionResult // 1
    {
        public CXCursorKind CursorKind;
        public IntPtr CompletionString;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct CXCodeCompleteResults // 1
    {
        public IntPtr Results;
        public uint NumResults;
    }
    public delegate void CXInclusionVisitor(IntPtr included_file, out CXSourceLocation inclusion_stack, uint include_len, IntPtr client_data);
    [StructLayout(LayoutKind.Sequential)]
    public struct CXCursorAndRangeVisitor // 1
    {
        public IntPtr context;
        public IntPtr visit;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct CXIdxLoc // 1
    {
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 2)] public IntPtr[] ptr_data;
        public uint int_data;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct CXIdxIncludedFileInfo // 1
    {
        public CXIdxLoc hashLoc;
        public IntPtr filename;
        public IntPtr file;
        public int isImport;
        public int isAngled;
        public int isModuleImport;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct CXIdxImportedASTFileInfo // 1
    {
        public IntPtr file;
        public IntPtr module;
        public CXIdxLoc loc;
        public int isImplicit;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct CXIdxAttrInfo // 1
    {
        public CXIdxAttrKind kind;
        public CXCursor cursor;
        public CXIdxLoc loc;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct CXIdxEntityInfo // 1
    {
        public CXIdxEntityKind kind;
        public CXIdxEntityCXXTemplateKind templateKind;
        public CXIdxEntityLanguage lang;
        public IntPtr name;
        public IntPtr USR;
        public CXCursor cursor;
        public IntPtr attributes;
        public uint numAttributes;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct CXIdxContainerInfo // 1
    {
        public CXCursor cursor;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct CXIdxIBOutletCollectionAttrInfo // 1
    {
        public IntPtr attrInfo;
        public IntPtr objcClass;
        public CXCursor classCursor;
        public CXIdxLoc classLoc;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct CXIdxDeclInfo // 1
    {
        public IntPtr entityInfo;
        public CXCursor cursor;
        public CXIdxLoc loc;
        public IntPtr semanticContainer;
        public IntPtr lexicalContainer;
        public int isRedeclaration;
        public int isDefinition;
        public int isContainer;
        public IntPtr declAsContainer;
        public int isImplicit;
        public IntPtr attributes;
        public uint numAttributes;
        public uint flags;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct CXIdxObjCContainerDeclInfo // 1
    {
        public IntPtr declInfo;
        public CXIdxObjCContainerKind kind;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct CXIdxBaseClassInfo // 1
    {
        public IntPtr _base;
        public CXCursor cursor;
        public CXIdxLoc loc;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct CXIdxObjCProtocolRefInfo // 1
    {
        public IntPtr protocol;
        public CXCursor cursor;
        public CXIdxLoc loc;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct CXIdxObjCProtocolRefListInfo // 1
    {
        public IntPtr protocols;
        public uint numProtocols;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct CXIdxObjCInterfaceDeclInfo // 1
    {
        public IntPtr containerInfo;
        public IntPtr superInfo;
        public IntPtr protocols;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct CXIdxObjCCategoryDeclInfo // 1
    {
        public IntPtr containerInfo;
        public IntPtr objcClass;
        public CXCursor classCursor;
        public CXIdxLoc classLoc;
        public IntPtr protocols;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct CXIdxObjCPropertyDeclInfo // 1
    {
        public IntPtr declInfo;
        public IntPtr getter;
        public IntPtr setter;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct CXIdxCXXClassDeclInfo // 1
    {
        public IntPtr declInfo;
        public IntPtr bases;
        public uint numBases;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct CXIdxEntityRefInfo // 1
    {
        public CXIdxEntityRefKind kind;
        public CXCursor cursor;
        public CXIdxLoc loc;
        public IntPtr referencedEntity;
        public IntPtr parentEntity;
        public IntPtr container;
        public CXSymbolRole role;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct IndexerCallbacks // 1
    {
        public IntPtr abortQuery;
        public IntPtr diagnostic;
        public IntPtr enteredMainFile;
        public IntPtr ppIncludedFile;
        public IntPtr importedASTFile;
        public IntPtr startedTranslationUnit;
        public IntPtr indexDeclaration;
        public IntPtr indexEntityReference;
    }
    public delegate CXVisitorResult CXFieldVisitor(CXCursor C, IntPtr client_data);
    public static class index
    {
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_createIndex(
            int excludeDeclarationsFromPCH,
            int displayDiagnostics
        );
        [DllImport("libclang.dll")]
        public static extern void clang_disposeIndex(
            IntPtr index
        );
        [DllImport("libclang.dll")]
        public static extern void clang_CXIndex_setGlobalOptions(
            IntPtr __param__1,
            uint options
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_CXIndex_getGlobalOptions(
            IntPtr __param__1
        );
        [DllImport("libclang.dll")]
        public static extern void clang_CXIndex_setInvocationEmissionPathOption(
            IntPtr __param__1,
            ref sbyte Path
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_getFileName(
            IntPtr SFile
        );
        [DllImport("libclang.dll")]
        public static extern long clang_getFileTime(
            IntPtr SFile
        );
        [DllImport("libclang.dll")]
        public static extern int clang_getFileUniqueID(
            IntPtr file,
            out CXFileUniqueID outID
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_isFileMultipleIncludeGuarded(
            out CXTranslationUnitImpl tu,
            IntPtr file
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_getFile(
            out CXTranslationUnitImpl tu,
            ref sbyte file_name
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_getFileContents(
            out CXTranslationUnitImpl tu,
            IntPtr file,
            out ulong size
        );
        [DllImport("libclang.dll")]
        public static extern int clang_File_isEqual(
            IntPtr file1,
            IntPtr file2
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_File_tryGetRealPathName(
            IntPtr file
        );
        [DllImport("libclang.dll")]
        public static extern CXSourceLocation clang_getNullLocation(
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_equalLocations(
            CXSourceLocation loc1,
            CXSourceLocation loc2
        );
        [DllImport("libclang.dll")]
        public static extern CXSourceLocation clang_getLocation(
            out CXTranslationUnitImpl tu,
            IntPtr file,
            uint line,
            uint column
        );
        [DllImport("libclang.dll")]
        public static extern CXSourceLocation clang_getLocationForOffset(
            out CXTranslationUnitImpl tu,
            IntPtr file,
            uint offset
        );
        [DllImport("libclang.dll")]
        public static extern int clang_Location_isInSystemHeader(
            CXSourceLocation location
        );
        [DllImport("libclang.dll")]
        public static extern int clang_Location_isFromMainFile(
            CXSourceLocation location
        );
        [DllImport("libclang.dll")]
        public static extern CXSourceRange clang_getNullRange(
        );
        [DllImport("libclang.dll")]
        public static extern CXSourceRange clang_getRange(
            CXSourceLocation begin,
            CXSourceLocation end
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_equalRanges(
            CXSourceRange range1,
            CXSourceRange range2
        );
        [DllImport("libclang.dll")]
        public static extern int clang_Range_isNull(
            CXSourceRange range
        );
        [DllImport("libclang.dll")]
        public static extern void clang_getExpansionLocation(
            CXSourceLocation location,
            out IntPtr file,
            out uint line,
            out uint column,
            out uint offset
        );
        [DllImport("libclang.dll")]
        public static extern void clang_getPresumedLocation(
            CXSourceLocation location,
            out CXString filename,
            out uint line,
            out uint column
        );
        [DllImport("libclang.dll")]
        public static extern void clang_getInstantiationLocation(
            CXSourceLocation location,
            out IntPtr file,
            out uint line,
            out uint column,
            out uint offset
        );
        [DllImport("libclang.dll")]
        public static extern void clang_getSpellingLocation(
            CXSourceLocation location,
            out IntPtr file,
            out uint line,
            out uint column,
            out uint offset
        );
        [DllImport("libclang.dll")]
        public static extern void clang_getFileLocation(
            CXSourceLocation location,
            out IntPtr file,
            out uint line,
            out uint column,
            out uint offset
        );
        [DllImport("libclang.dll")]
        public static extern CXSourceLocation clang_getRangeStart(
            CXSourceRange range
        );
        [DllImport("libclang.dll")]
        public static extern CXSourceLocation clang_getRangeEnd(
            CXSourceRange range
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_getSkippedRanges(
            out CXTranslationUnitImpl tu,
            IntPtr file
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_getAllSkippedRanges(
            out CXTranslationUnitImpl tu
        );
        [DllImport("libclang.dll")]
        public static extern void clang_disposeSourceRangeList(
            out CXSourceRangeList ranges
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_getNumDiagnosticsInSet(
            IntPtr Diags
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_getDiagnosticInSet(
            IntPtr Diags,
            uint Index
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_loadDiagnostics(
            ref sbyte file,
            out CXLoadDiag_Error error,
            out CXString errorString
        );
        [DllImport("libclang.dll")]
        public static extern void clang_disposeDiagnosticSet(
            IntPtr Diags
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_getChildDiagnostics(
            IntPtr D
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_getNumDiagnostics(
            out CXTranslationUnitImpl Unit
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_getDiagnostic(
            out CXTranslationUnitImpl Unit,
            uint Index
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_getDiagnosticSetFromTU(
            out CXTranslationUnitImpl Unit
        );
        [DllImport("libclang.dll")]
        public static extern void clang_disposeDiagnostic(
            IntPtr Diagnostic
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_formatDiagnostic(
            IntPtr Diagnostic,
            uint Options
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_defaultDiagnosticDisplayOptions(
        );
        [DllImport("libclang.dll")]
        public static extern CXDiagnosticSeverity clang_getDiagnosticSeverity(
            IntPtr __param__1
        );
        [DllImport("libclang.dll")]
        public static extern CXSourceLocation clang_getDiagnosticLocation(
            IntPtr __param__1
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_getDiagnosticSpelling(
            IntPtr __param__1
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_getDiagnosticOption(
            IntPtr Diag,
            out CXString Disable
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_getDiagnosticCategory(
            IntPtr __param__1
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_getDiagnosticCategoryName(
            uint Category
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_getDiagnosticCategoryText(
            IntPtr __param__1
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_getDiagnosticNumRanges(
            IntPtr __param__1
        );
        [DllImport("libclang.dll")]
        public static extern CXSourceRange clang_getDiagnosticRange(
            IntPtr Diagnostic,
            uint Range
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_getDiagnosticNumFixIts(
            IntPtr Diagnostic
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_getDiagnosticFixIt(
            IntPtr Diagnostic,
            uint FixIt,
            out CXSourceRange ReplacementRange
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_getTranslationUnitSpelling(
            out CXTranslationUnitImpl CTUnit
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_createTranslationUnitFromSourceFile(
            IntPtr CIdx,
            ref sbyte source_filename,
            int num_clang_command_line_args,
            ref IntPtr clang_command_line_args,
            uint num_unsaved_files,
            out CXUnsavedFile unsaved_files
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_createTranslationUnit(
            IntPtr CIdx,
            ref sbyte ast_filename
        );
        [DllImport("libclang.dll")]
        public static extern CXErrorCode clang_createTranslationUnit2(
            IntPtr CIdx,
            ref sbyte ast_filename,
            out IntPtr out_TU
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_defaultEditingTranslationUnitOptions(
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_parseTranslationUnit(
            IntPtr CIdx,
            ref byte source_filename,
            ref IntPtr command_line_args,
            int num_command_line_args,
            out CXUnsavedFile unsaved_files,
            uint num_unsaved_files,
            uint options
        );
        [DllImport("libclang.dll")]
        public static extern CXErrorCode clang_parseTranslationUnit2(
            IntPtr CIdx,
            ref sbyte source_filename,
            ref IntPtr command_line_args,
            int num_command_line_args,
            out CXUnsavedFile unsaved_files,
            uint num_unsaved_files,
            uint options,
            out IntPtr out_TU
        );
        [DllImport("libclang.dll")]
        public static extern CXErrorCode clang_parseTranslationUnit2FullArgv(
            IntPtr CIdx,
            ref sbyte source_filename,
            ref IntPtr command_line_args,
            int num_command_line_args,
            out CXUnsavedFile unsaved_files,
            uint num_unsaved_files,
            uint options,
            out IntPtr out_TU
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_defaultSaveOptions(
            out CXTranslationUnitImpl TU
        );
        [DllImport("libclang.dll")]
        public static extern int clang_saveTranslationUnit(
            out CXTranslationUnitImpl TU,
            ref sbyte FileName,
            uint options
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_suspendTranslationUnit(
            out CXTranslationUnitImpl __param__1
        );
        [DllImport("libclang.dll")]
        public static extern void clang_disposeTranslationUnit(
            out CXTranslationUnitImpl __param__1
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_defaultReparseOptions(
            out CXTranslationUnitImpl TU
        );
        [DllImport("libclang.dll")]
        public static extern int clang_reparseTranslationUnit(
            out CXTranslationUnitImpl TU,
            uint num_unsaved_files,
            out CXUnsavedFile unsaved_files,
            uint options
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_getTUResourceUsageName(
            CXTUResourceUsageKind kind
        );
        [DllImport("libclang.dll")]
        public static extern CXTUResourceUsage clang_getCXTUResourceUsage(
            out CXTranslationUnitImpl TU
        );
        [DllImport("libclang.dll")]
        public static extern void clang_disposeCXTUResourceUsage(
            CXTUResourceUsage usage
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_getTranslationUnitTargetInfo(
            out CXTranslationUnitImpl CTUnit
        );
        [DllImport("libclang.dll")]
        public static extern void clang_TargetInfo_dispose(
            out CXTargetInfoImpl Info
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_TargetInfo_getTriple(
            out CXTargetInfoImpl Info
        );
        [DllImport("libclang.dll")]
        public static extern int clang_TargetInfo_getPointerWidth(
            out CXTargetInfoImpl Info
        );
        [DllImport("libclang.dll")]
        public static extern CXCursor clang_getNullCursor(
        );
        [DllImport("libclang.dll")]
        public static extern CXCursor clang_getTranslationUnitCursor(
            out CXTranslationUnitImpl __param__1
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_equalCursors(
            CXCursor __param__1,
            CXCursor __param__2
        );
        [DllImport("libclang.dll")]
        public static extern int clang_Cursor_isNull(
            CXCursor cursor
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_hashCursor(
            CXCursor __param__1
        );
        [DllImport("libclang.dll")]
        public static extern CXCursorKind clang_getCursorKind(
            CXCursor __param__1
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_isDeclaration(
            CXCursorKind __param__1
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_isInvalidDeclaration(
            CXCursor __param__1
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_isReference(
            CXCursorKind __param__1
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_isExpression(
            CXCursorKind __param__1
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_isStatement(
            CXCursorKind __param__1
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_isAttribute(
            CXCursorKind __param__1
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_Cursor_hasAttrs(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_isInvalid(
            CXCursorKind __param__1
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_isTranslationUnit(
            CXCursorKind __param__1
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_isPreprocessing(
            CXCursorKind __param__1
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_isUnexposed(
            CXCursorKind __param__1
        );
        [DllImport("libclang.dll")]
        public static extern CXLinkageKind clang_getCursorLinkage(
            CXCursor cursor
        );
        [DllImport("libclang.dll")]
        public static extern CXVisibilityKind clang_getCursorVisibility(
            CXCursor cursor
        );
        [DllImport("libclang.dll")]
        public static extern CXAvailabilityKind clang_getCursorAvailability(
            CXCursor cursor
        );
        [DllImport("libclang.dll")]
        public static extern int clang_getCursorPlatformAvailability(
            CXCursor cursor,
            out int always_deprecated,
            out CXString deprecated_message,
            out int always_unavailable,
            out CXString unavailable_message,
            out CXPlatformAvailability availability,
            int availability_size
        );
        [DllImport("libclang.dll")]
        public static extern void clang_disposeCXPlatformAvailability(
            out CXPlatformAvailability availability
        );
        [DllImport("libclang.dll")]
        public static extern CXLanguageKind clang_getCursorLanguage(
            CXCursor cursor
        );
        [DllImport("libclang.dll")]
        public static extern CXTLSKind clang_getCursorTLSKind(
            CXCursor cursor
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_Cursor_getTranslationUnit(
            CXCursor __param__1
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_createCXCursorSet(
        );
        [DllImport("libclang.dll")]
        public static extern void clang_disposeCXCursorSet(
            out CXCursorSetImpl cset
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_CXCursorSet_contains(
            out CXCursorSetImpl cset,
            CXCursor cursor
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_CXCursorSet_insert(
            out CXCursorSetImpl cset,
            CXCursor cursor
        );
        [DllImport("libclang.dll")]
        public static extern CXCursor clang_getCursorSemanticParent(
            CXCursor cursor
        );
        [DllImport("libclang.dll")]
        public static extern CXCursor clang_getCursorLexicalParent(
            CXCursor cursor
        );
        [DllImport("libclang.dll")]
        public static extern void clang_getOverriddenCursors(
            CXCursor cursor,
            out IntPtr overridden,
            out uint num_overridden
        );
        [DllImport("libclang.dll")]
        public static extern void clang_disposeOverriddenCursors(
            out CXCursor overridden
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_getIncludedFile(
            CXCursor cursor
        );
        [DllImport("libclang.dll")]
        public static extern CXCursor clang_getCursor(
            out CXTranslationUnitImpl __param__1,
            CXSourceLocation __param__2
        );
        [DllImport("libclang.dll")]
        public static extern CXSourceLocation clang_getCursorLocation(
            CXCursor __param__1
        );
        [DllImport("libclang.dll")]
        public static extern CXSourceRange clang_getCursorExtent(
            CXCursor __param__1
        );
        [DllImport("libclang.dll")]
        public static extern CXType clang_getCursorType(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_getTypeSpelling(
            CXType CT
        );
        [DllImport("libclang.dll")]
        public static extern CXType clang_getTypedefDeclUnderlyingType(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern CXType clang_getEnumDeclIntegerType(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern long clang_getEnumConstantDeclValue(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern ulong clang_getEnumConstantDeclUnsignedValue(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern int clang_getFieldDeclBitWidth(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern int clang_Cursor_getNumArguments(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern CXCursor clang_Cursor_getArgument(
            CXCursor C,
            uint i
        );
        [DllImport("libclang.dll")]
        public static extern int clang_Cursor_getNumTemplateArguments(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern CXTemplateArgumentKind clang_Cursor_getTemplateArgumentKind(
            CXCursor C,
            uint I
        );
        [DllImport("libclang.dll")]
        public static extern CXType clang_Cursor_getTemplateArgumentType(
            CXCursor C,
            uint I
        );
        [DllImport("libclang.dll")]
        public static extern long clang_Cursor_getTemplateArgumentValue(
            CXCursor C,
            uint I
        );
        [DllImport("libclang.dll")]
        public static extern ulong clang_Cursor_getTemplateArgumentUnsignedValue(
            CXCursor C,
            uint I
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_equalTypes(
            CXType A,
            CXType B
        );
        [DllImport("libclang.dll")]
        public static extern CXType clang_getCanonicalType(
            CXType T
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_isConstQualifiedType(
            CXType T
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_Cursor_isMacroFunctionLike(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_Cursor_isMacroBuiltin(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_Cursor_isFunctionInlined(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_isVolatileQualifiedType(
            CXType T
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_isRestrictQualifiedType(
            CXType T
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_getAddressSpace(
            CXType T
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_getTypedefName(
            CXType CT
        );
        [DllImport("libclang.dll")]
        public static extern CXType clang_getPointeeType(
            CXType T
        );
        [DllImport("libclang.dll")]
        public static extern CXCursor clang_getTypeDeclaration(
            CXType T
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_getDeclObjCTypeEncoding(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_Type_getObjCEncoding(
            CXType type
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_getTypeKindSpelling(
            CXTypeKind K
        );
        [DllImport("libclang.dll")]
        public static extern CXCallingConv clang_getFunctionTypeCallingConv(
            CXType T
        );
        [DllImport("libclang.dll")]
        public static extern CXType clang_getResultType(
            CXType T
        );
        [DllImport("libclang.dll")]
        public static extern int clang_getExceptionSpecificationType(
            CXType T
        );
        [DllImport("libclang.dll")]
        public static extern int clang_getNumArgTypes(
            CXType T
        );
        [DllImport("libclang.dll")]
        public static extern CXType clang_getArgType(
            CXType T,
            uint i
        );
        [DllImport("libclang.dll")]
        public static extern CXType clang_Type_getObjCObjectBaseType(
            CXType T
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_Type_getNumObjCProtocolRefs(
            CXType T
        );
        [DllImport("libclang.dll")]
        public static extern CXCursor clang_Type_getObjCProtocolDecl(
            CXType T,
            uint i
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_Type_getNumObjCTypeArgs(
            CXType T
        );
        [DllImport("libclang.dll")]
        public static extern CXType clang_Type_getObjCTypeArg(
            CXType T,
            uint i
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_isFunctionTypeVariadic(
            CXType T
        );
        [DllImport("libclang.dll")]
        public static extern CXType clang_getCursorResultType(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern int clang_getCursorExceptionSpecificationType(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_isPODType(
            CXType T
        );
        [DllImport("libclang.dll")]
        public static extern CXType clang_getElementType(
            CXType T
        );
        [DllImport("libclang.dll")]
        public static extern long clang_getNumElements(
            CXType T
        );
        [DllImport("libclang.dll")]
        public static extern CXType clang_getArrayElementType(
            CXType T
        );
        [DllImport("libclang.dll")]
        public static extern long clang_getArraySize(
            CXType T
        );
        [DllImport("libclang.dll")]
        public static extern CXType clang_Type_getNamedType(
            CXType T
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_Type_isTransparentTagTypedef(
            CXType T
        );
        [DllImport("libclang.dll")]
        public static extern CXTypeNullabilityKind clang_Type_getNullability(
            CXType T
        );
        [DllImport("libclang.dll")]
        public static extern long clang_Type_getAlignOf(
            CXType T
        );
        [DllImport("libclang.dll")]
        public static extern CXType clang_Type_getClassType(
            CXType T
        );
        [DllImport("libclang.dll")]
        public static extern long clang_Type_getSizeOf(
            CXType T
        );
        [DllImport("libclang.dll")]
        public static extern long clang_Type_getOffsetOf(
            CXType T,
            ref sbyte S
        );
        [DllImport("libclang.dll")]
        public static extern CXType clang_Type_getModifiedType(
            CXType T
        );
        [DllImport("libclang.dll")]
        public static extern long clang_Cursor_getOffsetOfField(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_Cursor_isAnonymous(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_Cursor_isAnonymousRecordDecl(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_Cursor_isInlineNamespace(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern int clang_Type_getNumTemplateArguments(
            CXType T
        );
        [DllImport("libclang.dll")]
        public static extern CXType clang_Type_getTemplateArgumentAsType(
            CXType T,
            uint i
        );
        [DllImport("libclang.dll")]
        public static extern CXRefQualifierKind clang_Type_getCXXRefQualifier(
            CXType T
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_Cursor_isBitField(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_isVirtualBase(
            CXCursor __param__1
        );
        [DllImport("libclang.dll")]
        public static extern CX_CXXAccessSpecifier clang_getCXXAccessSpecifier(
            CXCursor __param__1
        );
        [DllImport("libclang.dll")]
        public static extern CX_StorageClass clang_Cursor_getStorageClass(
            CXCursor __param__1
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_getNumOverloadedDecls(
            CXCursor cursor
        );
        [DllImport("libclang.dll")]
        public static extern CXCursor clang_getOverloadedDecl(
            CXCursor cursor,
            uint index
        );
        [DllImport("libclang.dll")]
        public static extern CXType clang_getIBOutletCollectionType(
            CXCursor __param__1
        );
        [DllImport("libclang.dll")]
        public static extern CXChildVisitResult CXCursorVisitor(
            CXCursor cursor,
            CXCursor parent,
            IntPtr client_data
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_visitChildren(
            CXCursor parent,
            CXCursorVisitor visitor,
            IntPtr client_data
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_getCursorUSR(
            CXCursor __param__1
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_constructUSR_ObjCClass(
            ref sbyte class_name
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_constructUSR_ObjCCategory(
            ref sbyte class_name,
            ref sbyte category_name
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_constructUSR_ObjCProtocol(
            ref sbyte protocol_name
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_constructUSR_ObjCIvar(
            ref sbyte name,
            CXString classUSR
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_constructUSR_ObjCMethod(
            ref sbyte name,
            uint isInstanceMethod,
            CXString classUSR
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_constructUSR_ObjCProperty(
            ref sbyte property,
            CXString classUSR
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_getCursorSpelling(
            CXCursor __param__1
        );
        [DllImport("libclang.dll")]
        public static extern CXSourceRange clang_Cursor_getSpellingNameRange(
            CXCursor __param__1,
            uint pieceIndex,
            uint options
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_PrintingPolicy_getProperty(
            IntPtr Policy,
            CXPrintingPolicyProperty Property
        );
        [DllImport("libclang.dll")]
        public static extern void clang_PrintingPolicy_setProperty(
            IntPtr Policy,
            CXPrintingPolicyProperty Property,
            uint Value
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_getCursorPrintingPolicy(
            CXCursor __param__1
        );
        [DllImport("libclang.dll")]
        public static extern void clang_PrintingPolicy_dispose(
            IntPtr Policy
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_getCursorPrettyPrinted(
            CXCursor Cursor,
            IntPtr Policy
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_getCursorDisplayName(
            CXCursor __param__1
        );
        [DllImport("libclang.dll")]
        public static extern CXCursor clang_getCursorReferenced(
            CXCursor __param__1
        );
        [DllImport("libclang.dll")]
        public static extern CXCursor clang_getCursorDefinition(
            CXCursor __param__1
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_isCursorDefinition(
            CXCursor __param__1
        );
        [DllImport("libclang.dll")]
        public static extern CXCursor clang_getCanonicalCursor(
            CXCursor __param__1
        );
        [DllImport("libclang.dll")]
        public static extern int clang_Cursor_getObjCSelectorIndex(
            CXCursor __param__1
        );
        [DllImport("libclang.dll")]
        public static extern int clang_Cursor_isDynamicCall(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern CXType clang_Cursor_getReceiverType(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_Cursor_getObjCPropertyAttributes(
            CXCursor C,
            uint reserved
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_Cursor_getObjCPropertyGetterName(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_Cursor_getObjCPropertySetterName(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_Cursor_getObjCDeclQualifiers(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_Cursor_isObjCOptional(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_Cursor_isVariadic(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_Cursor_isExternalSymbol(
            CXCursor C,
            out CXString language,
            out CXString definedIn,
            out uint isGenerated
        );
        [DllImport("libclang.dll")]
        public static extern CXSourceRange clang_Cursor_getCommentRange(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_Cursor_getRawCommentText(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_Cursor_getBriefCommentText(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_Cursor_getMangling(
            CXCursor __param__1
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_Cursor_getCXXManglings(
            CXCursor __param__1
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_Cursor_getObjCManglings(
            CXCursor __param__1
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_Cursor_getModule(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_getModuleForFile(
            out CXTranslationUnitImpl __param__1,
            IntPtr __param__2
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_Module_getASTFile(
            IntPtr Module
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_Module_getParent(
            IntPtr Module
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_Module_getName(
            IntPtr Module
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_Module_getFullName(
            IntPtr Module
        );
        [DllImport("libclang.dll")]
        public static extern int clang_Module_isSystem(
            IntPtr Module
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_Module_getNumTopLevelHeaders(
            out CXTranslationUnitImpl __param__1,
            IntPtr Module
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_Module_getTopLevelHeader(
            out CXTranslationUnitImpl __param__1,
            IntPtr Module,
            uint Index
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_CXXConstructor_isConvertingConstructor(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_CXXConstructor_isCopyConstructor(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_CXXConstructor_isDefaultConstructor(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_CXXConstructor_isMoveConstructor(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_CXXField_isMutable(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_CXXMethod_isDefaulted(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_CXXMethod_isPureVirtual(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_CXXMethod_isStatic(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_CXXMethod_isVirtual(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_CXXRecord_isAbstract(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_EnumDecl_isScoped(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_CXXMethod_isConst(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern CXCursorKind clang_getTemplateCursorKind(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern CXCursor clang_getSpecializedCursorTemplate(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern CXSourceRange clang_getCursorReferenceNameRange(
            CXCursor C,
            uint NameFlags,
            uint PieceIndex
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_getToken(
            out CXTranslationUnitImpl TU,
            CXSourceLocation Location
        );
        [DllImport("libclang.dll")]
        public static extern CXTokenKind clang_getTokenKind(
            CXToken __param__1
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_getTokenSpelling(
            out CXTranslationUnitImpl __param__1,
            CXToken __param__2
        );
        [DllImport("libclang.dll")]
        public static extern CXSourceLocation clang_getTokenLocation(
            out CXTranslationUnitImpl __param__1,
            CXToken __param__2
        );
        [DllImport("libclang.dll")]
        public static extern CXSourceRange clang_getTokenExtent(
            out CXTranslationUnitImpl __param__1,
            CXToken __param__2
        );
        [DllImport("libclang.dll")]
        public static extern void clang_tokenize(
            out CXTranslationUnitImpl TU,
            CXSourceRange Range,
            out IntPtr Tokens,
            out uint NumTokens
        );
        [DllImport("libclang.dll")]
        public static extern void clang_annotateTokens(
            out CXTranslationUnitImpl TU,
            out CXToken Tokens,
            uint NumTokens,
            out CXCursor Cursors
        );
        [DllImport("libclang.dll")]
        public static extern void clang_disposeTokens(
            out CXTranslationUnitImpl TU,
            out CXToken Tokens,
            uint NumTokens
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_getCursorKindSpelling(
            CXCursorKind Kind
        );
        [DllImport("libclang.dll")]
        public static extern void clang_getDefinitionSpellingAndExtent(
            CXCursor __param__1,
            ref IntPtr startBuf,
            ref IntPtr endBuf,
            out uint startLine,
            out uint startColumn,
            out uint endLine,
            out uint endColumn
        );
        [DllImport("libclang.dll")]
        public static extern void clang_enableStackTraces(
        );
        [DllImport("libclang.dll")]
        public static extern void clang_executeOnThread(
            out IntPtr fn,
            IntPtr user_data,
            uint stack_size
        );
        [DllImport("libclang.dll")]
        public static extern void fn(
            IntPtr __param__1
        );
        [DllImport("libclang.dll")]
        public static extern CXCompletionChunkKind clang_getCompletionChunkKind(
            IntPtr completion_string,
            uint chunk_number
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_getCompletionChunkText(
            IntPtr completion_string,
            uint chunk_number
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_getCompletionChunkCompletionString(
            IntPtr completion_string,
            uint chunk_number
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_getNumCompletionChunks(
            IntPtr completion_string
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_getCompletionPriority(
            IntPtr completion_string
        );
        [DllImport("libclang.dll")]
        public static extern CXAvailabilityKind clang_getCompletionAvailability(
            IntPtr completion_string
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_getCompletionNumAnnotations(
            IntPtr completion_string
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_getCompletionAnnotation(
            IntPtr completion_string,
            uint annotation_number
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_getCompletionParent(
            IntPtr completion_string,
            out CXCursorKind kind
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_getCompletionBriefComment(
            IntPtr completion_string
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_getCursorCompletionString(
            CXCursor cursor
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_getCompletionNumFixIts(
            out CXCodeCompleteResults results,
            uint completion_index
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_getCompletionFixIt(
            out CXCodeCompleteResults results,
            uint completion_index,
            uint fixit_index,
            out CXSourceRange replacement_range
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_defaultCodeCompleteOptions(
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_codeCompleteAt(
            out CXTranslationUnitImpl TU,
            ref sbyte complete_filename,
            uint complete_line,
            uint complete_column,
            out CXUnsavedFile unsaved_files,
            uint num_unsaved_files,
            uint options
        );
        [DllImport("libclang.dll")]
        public static extern void clang_sortCodeCompletionResults(
            out CXCompletionResult Results,
            uint NumResults
        );
        [DllImport("libclang.dll")]
        public static extern void clang_disposeCodeCompleteResults(
            out CXCodeCompleteResults Results
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_codeCompleteGetNumDiagnostics(
            out CXCodeCompleteResults Results
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_codeCompleteGetDiagnostic(
            out CXCodeCompleteResults Results,
            uint Index
        );
        [DllImport("libclang.dll")]
        public static extern ulong clang_codeCompleteGetContexts(
            out CXCodeCompleteResults Results
        );
        [DllImport("libclang.dll")]
        public static extern CXCursorKind clang_codeCompleteGetContainerKind(
            out CXCodeCompleteResults Results,
            out uint IsIncomplete
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_codeCompleteGetContainerUSR(
            out CXCodeCompleteResults Results
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_codeCompleteGetObjCSelector(
            out CXCodeCompleteResults Results
        );
        [DllImport("libclang.dll")]
        public static extern CXString clang_getClangVersion(
        );
        [DllImport("libclang.dll")]
        public static extern void clang_toggleCrashRecovery(
            uint isEnabled
        );
        [DllImport("libclang.dll")]
        public static extern void CXInclusionVisitor(
            IntPtr included_file,
            out CXSourceLocation inclusion_stack,
            uint include_len,
            IntPtr client_data
        );
        [DllImport("libclang.dll")]
        public static extern void clang_getInclusions(
            out CXTranslationUnitImpl tu,
            CXInclusionVisitor visitor,
            IntPtr client_data
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_Cursor_Evaluate(
            CXCursor C
        );
        [DllImport("libclang.dll")]
        public static extern CXEvalResultKind clang_EvalResult_getKind(
            IntPtr E
        );
        [DllImport("libclang.dll")]
        public static extern int clang_EvalResult_getAsInt(
            IntPtr E
        );
        [DllImport("libclang.dll")]
        public static extern long clang_EvalResult_getAsLongLong(
            IntPtr E
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_EvalResult_isUnsignedInt(
            IntPtr E
        );
        [DllImport("libclang.dll")]
        public static extern ulong clang_EvalResult_getAsUnsigned(
            IntPtr E
        );
        [DllImport("libclang.dll")]
        public static extern double clang_EvalResult_getAsDouble(
            IntPtr E
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_EvalResult_getAsStr(
            IntPtr E
        );
        [DllImport("libclang.dll")]
        public static extern void clang_EvalResult_dispose(
            IntPtr E
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_getRemappings(
            ref sbyte path
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_getRemappingsFromFileList(
            ref IntPtr filePaths,
            uint numFiles
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_remap_getNumFiles(
            IntPtr __param__1
        );
        [DllImport("libclang.dll")]
        public static extern void clang_remap_getFilenames(
            IntPtr __param__1,
            uint index,
            out CXString original,
            out CXString transformed
        );
        [DllImport("libclang.dll")]
        public static extern void clang_remap_dispose(
            IntPtr __param__1
        );
        [DllImport("libclang.dll")]
        public static extern CXVisitorResult visit(
            IntPtr context,
            CXCursor __param__2,
            CXSourceRange __param__3
        );
        [DllImport("libclang.dll")]
        public static extern CXResult clang_findReferencesInFile(
            CXCursor cursor,
            IntPtr file,
            CXCursorAndRangeVisitor visitor
        );
        [DllImport("libclang.dll")]
        public static extern CXResult clang_findIncludesInFile(
            out CXTranslationUnitImpl TU,
            IntPtr file,
            CXCursorAndRangeVisitor visitor
        );
        [DllImport("libclang.dll")]
        public static extern int abortQuery(
            IntPtr client_data,
            IntPtr reserved
        );
        [DllImport("libclang.dll")]
        public static extern void diagnostic(
            IntPtr client_data,
            IntPtr __param__2,
            IntPtr reserved
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr enteredMainFile(
            IntPtr client_data,
            IntPtr mainFile,
            IntPtr reserved
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr ppIncludedFile(
            IntPtr client_data,
            ref CXIdxIncludedFileInfo __param__2
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr importedASTFile(
            IntPtr client_data,
            ref CXIdxImportedASTFileInfo __param__2
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr startedTranslationUnit(
            IntPtr client_data,
            IntPtr reserved
        );
        [DllImport("libclang.dll")]
        public static extern void indexDeclaration(
            IntPtr client_data,
            ref CXIdxDeclInfo __param__2
        );
        [DllImport("libclang.dll")]
        public static extern void indexEntityReference(
            IntPtr client_data,
            ref CXIdxEntityRefInfo __param__2
        );
        [DllImport("libclang.dll")]
        public static extern int clang_index_isEntityObjCContainerKind(
            CXIdxEntityKind __param__1
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_index_getObjCContainerDeclInfo(
            ref CXIdxDeclInfo __param__1
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_index_getObjCInterfaceDeclInfo(
            ref CXIdxDeclInfo __param__1
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_index_getObjCCategoryDeclInfo(
            ref CXIdxDeclInfo __param__1
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_index_getObjCProtocolRefListInfo(
            ref CXIdxDeclInfo __param__1
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_index_getObjCPropertyDeclInfo(
            ref CXIdxDeclInfo __param__1
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_index_getIBOutletCollectionAttrInfo(
            ref CXIdxAttrInfo __param__1
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_index_getCXXClassDeclInfo(
            ref CXIdxDeclInfo __param__1
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_index_getClientContainer(
            ref CXIdxContainerInfo __param__1
        );
        [DllImport("libclang.dll")]
        public static extern void clang_index_setClientContainer(
            ref CXIdxContainerInfo __param__1,
            IntPtr __param__2
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_index_getClientEntity(
            ref CXIdxEntityInfo __param__1
        );
        [DllImport("libclang.dll")]
        public static extern void clang_index_setClientEntity(
            ref CXIdxEntityInfo __param__1,
            IntPtr __param__2
        );
        [DllImport("libclang.dll")]
        public static extern IntPtr clang_IndexAction_create(
            IntPtr CIdx
        );
        [DllImport("libclang.dll")]
        public static extern void clang_IndexAction_dispose(
            IntPtr __param__1
        );
        [DllImport("libclang.dll")]
        public static extern int clang_indexSourceFile(
            IntPtr __param__1,
            IntPtr client_data,
            out IndexerCallbacks index_callbacks,
            uint index_callbacks_size,
            uint index_options,
            ref sbyte source_filename,
            ref IntPtr command_line_args,
            int num_command_line_args,
            out CXUnsavedFile unsaved_files,
            uint num_unsaved_files,
            out IntPtr out_TU,
            uint TU_options
        );
        [DllImport("libclang.dll")]
        public static extern int clang_indexSourceFileFullArgv(
            IntPtr __param__1,
            IntPtr client_data,
            out IndexerCallbacks index_callbacks,
            uint index_callbacks_size,
            uint index_options,
            ref sbyte source_filename,
            ref IntPtr command_line_args,
            int num_command_line_args,
            out CXUnsavedFile unsaved_files,
            uint num_unsaved_files,
            out IntPtr out_TU,
            uint TU_options
        );
        [DllImport("libclang.dll")]
        public static extern int clang_indexTranslationUnit(
            IntPtr __param__1,
            IntPtr client_data,
            out IndexerCallbacks index_callbacks,
            uint index_callbacks_size,
            uint index_options,
            out CXTranslationUnitImpl __param__6
        );
        [DllImport("libclang.dll")]
        public static extern void clang_indexLoc_getFileLocation(
            CXIdxLoc loc,
            out IntPtr indexFile,
            out IntPtr file,
            out uint line,
            out uint column,
            out uint offset
        );
        [DllImport("libclang.dll")]
        public static extern CXSourceLocation clang_indexLoc_getCXSourceLocation(
            CXIdxLoc loc
        );
        [DllImport("libclang.dll")]
        public static extern CXVisitorResult CXFieldVisitor(
            CXCursor C,
            IntPtr client_data
        );
        [DllImport("libclang.dll")]
        public static extern uint clang_Type_visitFields(
            CXType T,
            CXFieldVisitor visitor,
            IntPtr client_data
        );
    }
}
